/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/championships": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all championships of a game
     * @description Retrieve all championships of a game
     */
    get: operations["getChampionships"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/championships/{championship_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve championship details
     * @description Retrieve championship details
     */
    get: operations["getChampionship"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/championships/{championship_id}/matches": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all matches of a championship
     * @description Retrieve all matches of a championship
     */
    get: operations["getChampionshipMatches"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/championships/{championship_id}/results": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all results of a championship
     * @description Retrieve all results of a championship
     */
    get: operations["getChampionshipResults"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/championships/{championship_id}/subscriptions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all subscriptions of a championship
     * @description Retrieve all subscriptions of a championship
     */
    get: operations["getChampionshipSubscriptions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve details of all games on FACEIT
     * @description Retrieve details of all games on FACEIT
     */
    get: operations["getAllGames"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/{gameId}/matchmakings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve details of all matchmakings of a game on FACEIT
     * @description Retrieve details of all matchmakings of a game on FACEIT
     */
    get: operations["getGameMatchmakings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/{game_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve game details
     * @description Retrieve game details
     */
    get: operations["getGame"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/{game_id}/parent": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve the details of the parent game, if the game is region-specific
     * @description Retrieve the details of the parent game, if the game is region-specific
     */
    get: operations["getParentGame"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/{game_id}/queues": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve queues by filters on FACEIT
     * @description Retrieve queues by filters on FACEIT. Available only for game developers and queue owners(organizers)
     */
    get: operations["getQueuesByEntityFilters"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/{game_id}/queues/{queue_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve details of a queue on FACEIT
     * @description Retrieve details of a queue on FACEIT. Available only for game or queue owners(organizers)
     */
    get: operations["getQueueById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/{game_id}/queues/{queue_id}/bans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve queue bans on FACEIT
     * @description Retrieve queue bans on FACEIT. Available only for game or queue owners(organizers)
     */
    get: operations["getQueueBans"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/{game_id}/regions/{region_id}/queues": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve queues by region on FACEIT
     * @description Retrieve queues by region on FACEIT. Available only for game developers
     */
    get: operations["getQueuesByRegion"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/hubs/{hub_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve hub details
     * @description Retrieve hub details
     */
    get: operations["getHub"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/hubs/{hub_id}/matches": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all matches of a hub
     * @description Retrieve all matches of a hub
     */
    get: operations["getHubMatches"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/hubs/{hub_id}/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all members of a hub
     * @description Retrieve all members of a hub
     */
    get: operations["getHubMembers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/hubs/{hub_id}/roles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all roles members can have in a hub
     * @description Retrieve all roles members can have in a hub
     */
    get: operations["getHubRoles"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/hubs/{hub_id}/rules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve rules of a hub
     * @description Retrieve rules of a hub
     */
    get: operations["getHubRules"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/hubs/{hub_id}/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve statistics of a hub
     * @description Retrieve statistics of a hub
     */
    get: operations["getHubStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leaderboards/championships/{championship_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all leaderboards of a championship
     * @description Retrieve all leaderboards of a championship
     */
    get: operations["getChampionshipLeaderboards"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leaderboards/championships/{championship_id}/groups/{group}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve group ranking of a championship
     * @description Retrieve group ranking of a championship
     */
    get: operations["getChampionshipGroupRanking"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leaderboards/hubs/{hub_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all leaderboards of a hub
     * @description Retrieve all leaderboards of a hub
     */
    get: operations["getHubLeaderboards"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leaderboards/hubs/{hub_id}/general": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all time ranking of a hub
     * @description Retrieve all time ranking of a hub
     */
    get: operations["getHubRanking"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leaderboards/hubs/{hub_id}/seasons/{season}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve seasonal ranking of a hub
     * @description Retrieve seasonal ranking of a hub
     */
    get: operations["getHubSeasonRanking"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leaderboards/{leaderboard_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve ranking from a leaderboard id
     * @description Retrieve ranking from a leaderboard id
     */
    get: operations["getLeaderboard"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leaderboards/{leaderboard_id}/players/{player_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve a players ranking in a leaderboard
     * @description Retrieve a players ranking in a leaderboard
     */
    get: operations["getPlayerRankingInLeaderboard"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leagues/{league_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve details of a league of a matchmaking on FACEIT
     * @description Retrieve details of a league of a matchmaking on FACEIT
     */
    get: operations["getLeagueById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leagues/{league_id}/seasons/{season_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve details of a season of a league on FACEIT
     * @description Retrieve details of a season of a league on FACEIT
     */
    get: operations["getLeagueSeason"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/leagues/{league_id}/seasons/{season_id}/players/{player_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve details of a player for a given league and season on FACEIT
     * @description Retrieve details of a player for a given league and season on FACEIT
     */
    get: operations["getPlayerForLeagueSeason"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/matches/{match_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve match details
     * @description Retrieve match details
     */
    get: operations["getMatch"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/matches/{match_id}/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve statistics of a match
     * @description Retrieve statistics of a match
     */
    get: operations["getMatchStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/matchmakings/{matchmaking_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve details of a matchmaking of a game on FACEIT
     * @description Retrieve details of a matchmaking of a game on FACEIT
     */
    get: operations["getMatchmaking"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve organizer details from name
     * @description Retrieve organizer details from name
     */
    get: operations["getOrganizerByName"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizers/{organizer_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve organizer details
     * @description Retrieve organizer details
     */
    get: operations["getOrganizer"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizers/{organizer_id}/championships": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all championships of an organizer
     * @description Retrieve all championships of an organizer
     */
    get: operations["getOrganizerChampionships"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizers/{organizer_id}/games": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all games an organizer is involved with
     * @description Retrieve all games an organizer is involved with
     */
    get: operations["getOrganizerGames"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizers/{organizer_id}/hubs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all hubs of an organizer
     * @description Retrieve all hubs of an organizer
     */
    get: operations["getOrganizerHubs"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizers/{organizer_id}/tournaments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all tournaments of an organizer
     * @description Retrieve all tournaments of an organizer
     */
    get: operations["getOrganizerTournaments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve player details
     * @description Retrieve player details
     */
    get: operations["getPlayerFromLookup"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players/{player_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve player details
     * @description Retrieve player details
     */
    get: operations["getPlayer"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players/{player_id}/bans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all bans of a player
     * @description Retrieve all bans of a player
     */
    get: operations["getPlayerBans"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players/{player_id}/games/{game_id}/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve statistics of a player for a given amount of matches
     * @description Retrieve statistics of a player for a given amount of matches
     */
    get: operations["getPlayerStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players/{player_id}/history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all matches of a player
     * @description Retrieve all matches of a player
     */
    get: operations["getPlayerHistory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players/{player_id}/hubs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all hubs of a player
     * @description Retrieve all hubs of a player
     */
    get: operations["getPlayerHubs"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players/{player_id}/stats/{game_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve statistics of a player
     * @description Retrieve statistics of a player
     */
    get: operations["getPlayerStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players/{player_id}/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all teams of a player
     * @description Retrieve all teams of a player
     */
    get: operations["getPlayerTeams"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/players/{player_id}/tournaments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all tournaments of a player
     * @description Retrieve all tournaments of a player
     */
    get: operations["getPlayerTournaments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rankings/games/{game_id}/regions/{region}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve global ranking of a game
     * @description Retrieve global ranking of a game
     */
    get: operations["getGlobalRanking"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rankings/games/{game_id}/regions/{region}/players/{player_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve user position in the global ranking of a game
     * @description Retrieve user position in the global ranking of a game
     */
    get: operations["getPlayerRanking"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/championships": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search for championships
     * @description Search for championships
     */
    get: operations["searchChampionships"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/clans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search for clans
     * @description Search for clans
     */
    get: operations["searchClans"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/hubs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search for hubs
     * @description Search for hubs
     */
    get: operations["searchHubs"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/organizers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search for organizers
     * @description Search for organizers
     */
    get: operations["searchOrganizers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/players": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search for players
     * @description Search for players
     */
    get: operations["searchPlayers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search for teams
     * @description Search for teams
     */
    get: operations["searchTeams"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/tournaments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search for tournaments
     * @description Search for tournaments
     */
    get: operations["searchTournaments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve team details
     * @description Retrieve team details
     */
    get: operations["getTeam"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/stats/{game_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve statistics of a team
     * @description Retrieve statistics of a team
     */
    get: operations["getTeamStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{team_id}/tournaments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve tournaments of a team
     * @description Retrieve tournaments of a team
     */
    get: operations["getTeamTournaments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve tournaments v1 (no longer used)
     * @description Retrieve tournaments v1 (no longer used). Please refer to the Championships controller to retrieve tournaments v2
     */
    get: operations["getTournamentsList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve tournament details
     * @description Retrieve tournament details
     */
    get: operations["getTournament"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/brackets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve brackets of a tournament
     * @description Retrieve brackets of a tournament
     */
    get: operations["getTournamentBrackets"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/matches": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all matches of a tournament
     * @description Retrieve all matches of a tournament
     */
    get: operations["getTournamentMatches"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve all teams of a tournament
     * @description Retrieve all teams of a tournament
     */
    get: operations["getTournamentTeams"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** AccessMode defines the access mode of a volume. */
    AccessMode: {
      BlockVolume?: components["schemas"]["TypeBlock"];
      MountVolume?: components["schemas"]["TypeMount"];
      Scope?: components["schemas"]["Scope"];
      Sharing?: components["schemas"]["SharingMode"];
    };
    Address: {
      address?: string;
      city?: string;
      country?: string;
      postcode?: string;
    };
    AlgorithmParameters: {
      band?: components["schemas"]["Band"];
    };
    Assets: {
      color?: string;
      icon?: string;
      image?: string;
    };
    /** @description AuthenticateOKBody authenticate o k body */
    AuthenticateOKBody: {
      /** @description An opaque token used to authenticate a user after a successful login */
      IdentityToken: string;
      /** @description The status of the authentication */
      Status: string;
    };
    /** Availability specifies the availability of the volume. */
    Availability: string;
    Band: {
      /** Format: int64 */
      value?: number;
    };
    BirthDate: {
      /** Format: int64 */
      date?: number;
      /** Format: int64 */
      month?: number;
      /** Format: int64 */
      year?: number;
    };
    Brackets: {
      game?: string;
      matches?: components["schemas"]["BracketsMatch"][];
      name?: string;
      rounds?: components["schemas"]["BracketsRound"][];
      status?: string;
    };
    BracketsFaction: {
      avatar?: string;
      nickname?: string;
      team_id?: string;
    };
    BracketsMatch: {
      faceit_url?: string;
      match_id?: string;
      /** Format: int64 */
      position?: number;
      results?: components["schemas"]["MatchResult"];
      /** Format: int64 */
      round?: number;
      state?: string;
      teams?: {
        [key: string]: components["schemas"]["BracketsFaction"];
      };
    };
    BracketsRound: {
      /** Format: int64 */
      best_of?: number;
      label?: string;
      /** Format: int64 */
      matches?: number;
      /** Format: int64 */
      round?: number;
      /** Format: int64 */
      start_time?: number;
      starts_asap?: boolean;
      /** Format: int64 */
      substitution_time?: number;
      substitutions_allowed?: boolean;
    };
    /** @description CapacityRange describes the minimum and maximum capacity a volume should be
     *     created with */
    CapacityRange: {
      /**
       * Format: int64
       * @description LimitBytes specifies that a volume must not be bigger than this. The
       *     value of 0 indicates an unspecified maximum
       */
      LimitBytes?: number;
      /**
       * Format: int64
       * @description RequiredBytes specifies that a volume must be at least this big. The
       *     value of 0 indicates an unspecified minimum.
       */
      RequiredBytes?: number;
    };
    Championship: {
      anticheat_required?: boolean;
      avatar?: string;
      background_image?: string;
      championship_id?: string;
      /** Format: int64 */
      championship_start?: number;
      /** Format: int64 */
      checkin_clear?: number;
      checkin_enabled?: boolean;
      /** Format: int64 */
      checkin_start?: number;
      cover_image?: string;
      /** Format: int64 */
      current_subscriptions?: number;
      description?: string;
      faceit_url?: string;
      featured?: boolean;
      full?: boolean;
      game_data?: components["schemas"]["Game"];
      game_id?: string;
      /** @description Deprecated: use championship_id instead */
      id?: string;
      join_checks?: components["schemas"]["JoinCheck"];
      name?: string;
      organizer_data?: components["schemas"]["Organizer"];
      organizer_id?: string;
      prizes?: components["schemas"]["Prize"][];
      region?: string;
      rules_id?: string;
      schedule?: {
        [key: string]: components["schemas"]["ChampionshipSchedule"];
      };
      screening?: components["schemas"]["ChampionshipScreening"];
      seeding_strategy?: string;
      /** Format: int64 */
      slots?: number;
      status?: string;
      stream?: components["schemas"]["ChampionshipStream"];
      /** Format: int64 */
      subscription_end?: number;
      /** Format: int64 */
      subscription_start?: number;
      subscriptions_locked?: boolean;
      substitution_configuration?: components["schemas"]["SubstitutionConfiguration"];
      /** Format: int64 */
      total_groups?: number;
      /** Format: int64 */
      total_prizes?: number;
      /** Format: int64 */
      total_rounds?: number;
      type?: string;
    };
    ChampionshipBounds: {
      /** Format: int64 */
      left?: number;
      /** Format: int64 */
      right?: number;
    };
    ChampionshipPlacement: {
      id?: string;
      name?: string;
      type?: string;
    };
    ChampionshipPlacementGroup: {
      bounds?: components["schemas"]["ChampionshipBounds"];
      placements?: components["schemas"]["ChampionshipPlacement"][];
    };
    ChampionshipResultList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["ChampionshipPlacementGroup"][];
      /** Format: int64 */
      start?: number;
    };
    ChampionshipSchedule: {
      /** Format: int64 */
      date?: number;
      status?: string;
    };
    ChampionshipScreening: {
      enabled?: boolean;
      id?: string;
    };
    ChampionshipStream: {
      active?: boolean;
      platform?: string;
      source?: string;
      title?: string;
    };
    ChampionshipSubscription: {
      coach?: string;
      coleader?: string;
      /** Format: int64 */
      group?: number;
      leader?: string;
      roster?: string[];
      status?: string;
      substitutes?: string[];
      team?: components["schemas"]["Team"];
    };
    ChampionshipSubscriptionsList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["ChampionshipSubscription"][];
      /** Format: int64 */
      start?: number;
    };
    ChampionshipsList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Championship"][];
      /** Format: int64 */
      start?: number;
    };
    /**
     * ChangeType Kind of change
     * Format: uint8
     * @description Can be one of:
     *
     *     `0`: Modified ("C")
     *     `1`: Added ("A")
     *     `2`: Deleted ("D")
     */
    ChangeType: number;
    CheckIn: {
      /** Format: int64 */
      time?: number;
    };
    ClanSearch: {
      /**
       * @description The clan's avatar url
       * @example https://faceit.com/images/example-clan-avatar.jpeg
       */
      avatar?: string;
      /**
       * @description The game of the clan
       * @example csgo
       */
      game?: string;
      /**
       * @description The id of the clan
       * @example 22479709-2064-4688-80fa-f02e97412345
       */
      id?: string;
      /**
       * @description The clan's join type
       * @example invite
       */
      join?: string;
      /**
       * Format: date-time
       * @description The time the clan's last match finished
       */
      last_match_finished?: string;
      /**
       * Format: int64
       * @description The clan's matches count in the last 24 hours
       * @example 3
       */
      matches_count_24h?: number;
      /**
       * Format: int64
       * @description The clan's maximum skill level
       * @example 10
       */
      max_skill_level?: number;
      /**
       * Format: int64
       * @description The clan's members count
       * @example 72300
       */
      members_count?: number;
      /**
       * Format: int64
       * @description The clan's members count in the last 24 hours
       * @example 1
       */
      members_count_24h?: number;
      /**
       * Format: int64
       * @description The clan's minimum skill level
       * @example 1
       */
      min_skill_level?: number;
      /**
       * @description The name of the clan
       * @example Example Clan
       */
      name?: string;
      /**
       * @description The clan's organizer id
       * @example f80900c9-88ef-43b4-aa97-d61ea3712345
       */
      organizer_id?: string;
      /**
       * @description The region of the clan
       * @example eu
       */
      region?: string;
      /**
       * @description The type of the clan
       * @example community
       */
      type?: string;
    };
    ClansSearchList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["ClanSearch"][];
      /** Format: int64 */
      start?: number;
    };
    /** @description ClusterVolume contains options and information specific to, and only present
     *     on, Swarm CSI cluster volumes. */
    ClusterVolume: {
      /** Format: date-time */
      CreatedAt?: string;
      /** @description ID is the Swarm ID of the volume. Because cluster volumes are Swarm
       *     objects, they have an ID, unlike non-cluster volumes, which only have a
       *     Name. This ID can be used to refer to the cluster volume. */
      ID?: string;
      Info?: components["schemas"]["Info"];
      /** @description PublishStatus contains the status of the volume as it pertains to its
       *     publishing on Nodes. */
      PublishStatus?: components["schemas"]["PublishStatus"][];
      Spec?: components["schemas"]["ClusterVolumeSpec"];
      /** Format: date-time */
      UpdatedAt?: string;
      Version?: components["schemas"]["Version"];
    };
    /** ClusterVolumeSpec contains the spec used to create this volume. */
    ClusterVolumeSpec: {
      AccessMode?: components["schemas"]["AccessMode"];
      AccessibilityRequirements?: components["schemas"]["TopologyRequirement"];
      Availability?: components["schemas"]["Availability"];
      CapacityRange?: components["schemas"]["CapacityRange"];
      /** @description Group defines the volume group of this volume. Volumes belonging to the
       *     same group can be referred to by group name when creating Services.
       *     Referring to a volume by group instructs swarm to treat volumes in that
       *     group interchangeably for the purpose of scheduling. Volumes with an
       *     empty string for a group technically all belong to the same, emptystring
       *     group. */
      Group?: string;
      /** @description Secrets defines Swarm Secrets that are passed to the CSI storage plugin
       *     when operating on this volume. */
      Secrets?: components["schemas"]["Secret"][];
    };
    CompetitionSearch: {
      competition_id?: string;
      competition_type?: string;
      game?: string;
      name?: string;
      /** Format: int64 */
      number_of_members?: number;
      organizer_id?: string;
      organizer_name?: string;
      organizer_type?: string;
      /** Format: int64 */
      players_checkedin?: number;
      /** Format: int64 */
      players_joined?: number;
      /** @description Tournaments */
      prize_type?: string;
      region?: string;
      /**
       * Format: int64
       * @description Hubs
       */
      slots?: number;
      /** Format: int64 */
      started_at?: number;
      status?: string;
      total_prize?: string;
    };
    CompetitionsSearchList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["CompetitionSearch"][];
      /** Format: int64 */
      start?: number;
    };
    /** @description ContainerTopOKBody OK response to ContainerTop operation */
    ContainerTopOKBody: {
      /** @description Each process running in the container, where each is process
       *     is an array of values corresponding to the titles. */
      Processes: string[][];
      /** @description The ps column titles */
      Titles: string[];
    };
    /** @description ContainerUpdateOKBody OK response to ContainerUpdate operation */
    ContainerUpdateOKBody: {
      /** @description warnings */
      Warnings: string[];
    };
    /**
     * CreateOptions VolumeConfig
     * @description Volume configuration
     */
    CreateOptions: {
      ClusterVolumeSpec?: components["schemas"]["ClusterVolumeSpec"];
      /** @description Name of the volume driver to use. */
      Driver?: string;
      /** @description A mapping of driver options and values. These options are
       *     passed directly to the driver and are driver specific. */
      DriverOpts?: {
        [key: string]: string;
      };
      /** @description User-defined key/value metadata. */
      Labels?: {
        [key: string]: string;
      };
      /** @description The new volume's name. If not specified, Docker generates a name. */
      Name?: string;
    };
    /**
     * CreateResponse ContainerCreateResponse
     * @description OK response to ContainerCreate operation
     */
    CreateResponse: {
      /** @description The ID of the created container */
      Id: string;
      /** @description Warnings encountered when creating the container */
      Warnings: string[];
    };
    /** @description DeleteResponse delete response */
    DeleteResponse: {
      /** @description The image ID of an image that was deleted */
      Deleted?: string;
      /** @description The image ID of an image that was untagged */
      Untagged?: string;
    };
    /**
     * DetailedMatchResult Model
     * @description # DetailedMatchResult holds detailed match results
     */
    DetailedMatchResult: {
      /**
       * @description True if the scores should be interpreted ascending (lower score wins)
       * @example true
       */
      asc_score?: boolean;
      /** @description The factions of the match */
      factions?: {
        [key: string]: components["schemas"]["FactionResult"];
      };
      /** @description The winner faction */
      winner?: string;
    };
    Division: {
      assets?: components["schemas"]["Assets"];
      /** @description The type of the division. Can be nested or classic. Nested means that the division has tiers, classic is without tiers. */
      config_type?: string;
      leaderboard_config?: components["schemas"]["LeaderboardConfig"];
      /** @description The leaderboards of the division */
      leaderboards?: string[];
      /**
       * Format: int64
       * @description Max ELO for a user to be placed in this division after placement matches
       */
      max_elo?: number;
      /**
       * Format: int64
       * @description Min ELO for a user to be placed in this division after placement matches
       */
      min_elo?: number;
      /** @description The name of the division. */
      name?: string;
      /** @description The tiers of the division */
      tiers?: components["schemas"]["Tier"][];
      /** @description The type of the division. */
      type?: string;
    };
    EntityRanking: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Ranking"][];
      leaderboard?: components["schemas"]["Leaderboard"];
      /** Format: int64 */
      start?: number;
    };
    /** ErrorResponse Represents an error. */
    ErrorResponse: {
      /** @description The error message. */
      message: string;
    };
    Faction: {
      avatar?: string;
      faction_id?: string;
      leader?: string;
      name?: string;
      roster?: components["schemas"]["Roster"][];
      roster_v1?: Record<string, never>;
      stats?: components["schemas"]["Stats"];
      substituted?: boolean;
      type?: string;
    };
    /**
     * FactionResult Model
     * @description # FactionResult holds detailed faction score
     */
    FactionResult: {
      /**
       * Format: int64
       * @description The score of the faction.
       * @example 2
       */
      score?: number;
    };
    /** FilesystemChange Change in the container's filesystem. */
    FilesystemChange: {
      Kind: components["schemas"]["ChangeType"];
      /** @description Path to file or directory that has changed. */
      Path: string;
    };
    Game: {
      assets?: {
        cover?: string;
        featured_img_l?: string;
        featured_img_m?: string;
        featured_img_s?: string;
        flag_img_icon?: string;
        flag_img_l?: string;
        flag_img_m?: string;
        flag_img_s?: string;
        landing_page?: string;
      };
      game_id?: string;
      long_label?: string;
      /** Format: int64 */
      order?: number;
      parent_game_id?: string;
      platforms?: string[];
      regions?: string[];
      short_label?: string;
    };
    GameDetail: {
      /** Format: int64 */
      faceit_elo?: number;
      game_player_id?: string;
      game_player_name?: string;
      /** @description Deprecated: no more in use */
      game_profile_id?: string;
      region?: string;
      /** @description Deprecated: no more in use */
      regions?: Record<string, never>;
      /** Format: int64 */
      skill_level?: number;
      /** @description Deprecated: use SkillLevel instead */
      skill_level_label?: string;
    };
    /** @description Here we return SkillLevel as string even if it is an int
     *     as we don't want to break the contract with devs */
    GameUserSearch: {
      name?: string;
      skill_level?: string;
    };
    GamesList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Game"][];
      /** Format: int64 */
      start?: number;
    };
    GeoDescription: {
      en?: string;
      fr?: string;
    };
    GeoLabel: {
      en?: string;
      fr?: string;
    };
    GlobalRanking: {
      country?: string;
      /** Format: int64 */
      faceit_elo?: number;
      /** Format: int64 */
      game_skill_level?: number;
      nickname?: string;
      player_id?: string;
      /** Format: int64 */
      position?: number;
    };
    GlobalRankingList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["GlobalRanking"][];
      /** Format: int64 */
      start?: number;
    };
    /** @description GraphDriverData Information about the storage driver used to store the container's and
     *     image's filesystem. */
    GraphDriverData: {
      /** @description Low-level storage metadata, provided as key/value pairs.
       *
       *     This information is driver-specific, and depends on the storage-driver
       *     in use, and should be used for informational purposes only. */
      Data: {
        [key: string]: string;
      };
      /** @description Name of the storage driver. */
      Name: string;
    };
    HistoryFaction: {
      avatar?: string;
      nickname?: string;
      players?: components["schemas"]["MatchHistoryPlayer"][];
      team_id?: string;
      type?: string;
    };
    /** @description HistoryResponseItem individual image layer information in response to ImageHistory operation */
    HistoryResponseItem: {
      /** @description comment */
      Comment: string;
      /**
       * Format: int64
       * @description created
       */
      Created: number;
      /** @description created by */
      CreatedBy: string;
      /** @description Id */
      Id: string;
      /**
       * Format: int64
       * @description size
       */
      Size: number;
      /** @description tags */
      Tags: string[];
    };
    Hub: {
      avatar?: string;
      background_image?: string;
      chat_room_id?: string;
      cover_image?: string;
      description?: string;
      faceit_url?: string;
      game_data?: components["schemas"]["Game"];
      game_id?: string;
      hub_id?: string;
      join_permission?: string;
      /** Format: int64 */
      max_skill_level?: number;
      /** Format: int64 */
      min_skill_level?: number;
      name?: string;
      organizer_data?: components["schemas"]["Organizer"];
      organizer_id?: string;
      /** Format: int64 */
      players_joined?: number;
      region?: string;
      rule_id?: string;
    };
    HubMembers: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["HubUser"][];
      /** Format: int64 */
      start?: number;
    };
    HubSmall: {
      avatar?: string;
      faceit_url?: string;
      game_id?: string;
      hub_id?: string;
      name?: string;
      organizer_id?: string;
    };
    HubStats: {
      game_id?: string;
      players?: components["schemas"]["StatsCompetitionPlayer"][];
    };
    HubUser: {
      avatar?: string;
      faceit_url?: string;
      nickname?: string;
      roles?: string[];
      user_id?: string;
    };
    HubsList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Hub"][];
      /** Format: int64 */
      start?: number;
    };
    HubsSmallList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["HubSmall"][];
      /** Format: int64 */
      start?: number;
    };
    /** @description IDResponse Response to an API call that returns just an Id */
    IdResponse: {
      /** @description The id of the newly created object. */
      Id: string;
    };
    /** @description Info contains information about the Volume as a whole as provided by
     *     the CSI storage plugin. */
    Info: {
      /** @description AccessibleTopolgoy is the topology this volume is actually accessible
       *     from. */
      AccessibleTopology?: components["schemas"]["Topology"][];
      /**
       * Format: int64
       * @description CapacityBytes is the capacity of the volume in bytes. A value of 0
       *     indicates that the capacity is unknown.
       */
      CapacityBytes?: number;
      /** @description VolumeContext is the context originating from the CSI storage plugin
       *     when the Volume is created. */
      VolumeContext?: {
        [key: string]: string;
      };
      /** @description VolumeID is the ID of the Volume as seen by the CSI storage plugin. This
       *     is distinct from the Volume's Swarm ID, which is the ID used by all of
       *     the Docker Engine to refer to the Volume. If this field is blank, then
       *     the Volume has not been successfully created yet. */
      VolumeID?: string;
    };
    Item: {
      category?: string;
      country_blacklist?: string[];
      country_whitelist?: string[];
      /** Format: date-time */
      created_at?: string;
      created_by?: string;
      /** @description ExternalId refers to the ID of the item in a third-party shop */
      external_id?: string;
      games?: string[];
      id?: string;
      media?: components["schemas"]["ItemMedia"];
      name?: string;
      new?: boolean;
      order_type?: string;
      platforms?: string[];
      /** Format: float */
      price?: number;
      published?: boolean;
      /** Format: int64 */
      quantity?: number;
      sizes?: string[];
      tags?: string[];
      unlimited?: boolean;
      url?: string;
    };
    ItemList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Item"][];
      /** Format: int64 */
      start?: number;
    };
    ItemMedia: {
      avatar_full?: string;
      avatar_medium?: string;
      avatar_small?: string;
    };
    JoinCheck: {
      allowed_team_types?: string[];
      blacklist_geo_countries?: string[];
      join_policy?: string;
      /** Format: int64 */
      max_skill_level?: number;
      membership_type?: string;
      /** Format: int64 */
      min_skill_level?: number;
      whitelist_geo_countries?: string[];
      /** Format: int64 */
      whitelist_geo_countries_min_players?: number;
    };
    JoinType: {
      /** Format: int64 */
      maxParty?: number;
      party?: boolean;
      premade?: boolean;
      solo?: boolean;
    };
    Leaderboard: {
      competition_id?: string;
      competition_type?: string;
      /** Format: int64 */
      end_date?: number;
      game_id?: string;
      /** Format: int64 */
      group?: number;
      leaderboard_id?: string;
      leaderboard_mode?: string;
      leaderboard_name?: string;
      leaderboard_type?: string;
      /** Format: int64 */
      min_matches?: number;
      /** Format: int64 */
      points_per_draw?: number;
      /** Format: int64 */
      points_per_loss?: number;
      /** Format: int64 */
      points_per_win?: number;
      points_type?: string;
      /** Format: int64 */
      ranking_boost?: number;
      ranking_type?: string;
      region?: string;
      /** Format: int64 */
      round?: number;
      /** Format: int64 */
      season?: number;
      /** Format: int64 */
      start_date?: number;
      /** Format: int64 */
      starting_points?: number;
      status?: string;
    };
    LeaderboardConfig: {
      /**
       * Format: int64
       * @description Max players in the leaderboard.
       */
      max_players?: number;
      /**
       * Format: int64
       * @description User will lose this amount of points if they lose a match
       * @example -2
       */
      points_per_loss?: number;
      /**
       * Format: int64
       * @description User will gain this amount of points if they win a match. When not configured, it's using the global value which is 3
       * @example 10
       */
      points_per_win?: number;
      promotion?: components["schemas"]["Promotion"];
      relegation?: components["schemas"]["Relegation"];
      /**
       * Format: int64
       * @description Starting points for a player.
       */
      starting_points?: number;
    };
    LeaderboardsList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Leaderboard"][];
      /** Format: int64 */
      start?: number;
    };
    /**
     * League Model
     * @description The League holds league information.
     */
    League: {
      /** @description The divisions of the league. */
      divisions?: components["schemas"]["Division"][];
      /** @description The game of the league. */
      game?: string;
      /** @description The id of the league. */
      id?: string;
      /**
       * Format: int64
       * @description The minimum matches of the league.
       */
      min_matches?: number;
      /** @description The region of the league. */
      region?: string;
      season?: components["schemas"]["Season"];
    };
    /**
     * ListResponse VolumeListResponse
     * @description Volume list response
     */
    ListResponse: {
      /** @description List of volumes */
      Volumes?: components["schemas"]["Volume"][];
      /** @description Warnings that occurred when fetching the list of volumes. */
      Warnings?: string[];
    };
    Match: {
      /** Format: int64 */
      best_of?: number;
      /** Format: int64 */
      broadcast_start_time?: number;
      broadcast_start_time_label?: string;
      calculate_elo?: boolean;
      chat_room_id?: string;
      competition_id?: string;
      competition_name?: string;
      competition_type?: string;
      /** Format: int64 */
      configured_at?: number;
      demo_url?: string[];
      detailed_results?: components["schemas"]["DetailedMatchResult"][];
      faceit_url?: string;
      /** Format: int64 */
      finished_at?: number;
      game?: string;
      /** Format: int64 */
      group?: number;
      match_id?: string;
      organizer_id?: string;
      region?: string;
      results?: components["schemas"]["MatchResult"];
      /** Format: int64 */
      round?: number;
      /** Format: int64 */
      scheduled_at?: number;
      /** Format: int64 */
      started_at?: number;
      status?: string;
      teams?: {
        [key: string]: components["schemas"]["Faction"];
      };
      /** Format: int64 */
      version?: number;
      voting?: Record<string, never>;
    };
    MatchHistory: {
      competition_id?: string;
      competition_name?: string;
      competition_type?: string;
      faceit_url?: string;
      /** Format: int64 */
      finished_at?: number;
      game_id?: string;
      game_mode?: string;
      match_id?: string;
      match_type?: string;
      /** Format: int64 */
      max_players?: number;
      organizer_id?: string;
      playing_players?: string[];
      region?: string;
      results?: components["schemas"]["MatchResult"];
      /** Format: int64 */
      started_at?: number;
      status?: string;
      teams?: {
        [key: string]: components["schemas"]["HistoryFaction"];
      };
      /** Format: int64 */
      teams_size?: number;
    };
    MatchHistoryList: {
      /** Format: int64 */
      end?: number;
      /** Format: int64 */
      from?: number;
      items?: components["schemas"]["MatchHistory"][];
      /** Format: int64 */
      start?: number;
      /** Format: int64 */
      to?: number;
    };
    MatchHistoryPlayer: {
      avatar?: string;
      faceit_url?: string;
      game_player_id?: string;
      game_player_name?: string;
      nickname?: string;
      player_id?: string;
      /** Format: int64 */
      skill_level?: number;
    };
    MatchList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Match"][];
      /** Format: int64 */
      start?: number;
    };
    MatchResult: {
      score?: {
        [key: string]: number;
      };
      winner?: string;
    };
    MatchStats: {
      rounds?: components["schemas"]["RoundStats"][];
    };
    /** @description Matchmaking A detailed representation of a matchmaking */
    Matchmaking: {
      game?: string;
      icon?: string;
      id?: string;
      league_id?: string;
      long_description?: string;
      name?: string;
      queues?: components["schemas"]["MatchmakingQueue"][];
      region?: string;
      short_description?: string;
    };
    /** @description MatchmakingList A list of matchmaking objects */
    MatchmakingList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["MatchmakingSlim"][];
      /** Format: int64 */
      start?: number;
    };
    MatchmakingQueue: {
      id?: string;
      name?: string;
      open?: boolean;
      organizer_id?: string;
      paused?: boolean;
    };
    /** @description MatchmakingSlim A slim representation of a matchmaking */
    MatchmakingSlim: {
      game?: string;
      has_league?: boolean;
      id?: string;
      name?: string;
      region?: string;
    };
    /** Meta is a base object inherited by most of the other once. */
    Meta: {
      /** Format: date-time */
      CreatedAt?: string;
      /** Format: date-time */
      UpdatedAt?: string;
      Version?: components["schemas"]["Version"];
    };
    Order: {
      /** Format: date-time */
      created_at?: string;
      game?: string;
      id?: string;
      item?: components["schemas"]["OrderItem"];
      status?: string;
      /** Format: date-time */
      updated_at?: string;
      user?: components["schemas"]["OrderUser"];
    };
    OrderItem: {
      external_id?: string;
      image_url?: string;
      item_id?: string;
      name?: string;
      /** Format: float */
      price?: number;
    };
    OrderList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Order"][];
      /** Format: int64 */
      start?: number;
    };
    OrderUser: {
      external_id?: string;
      id?: string;
    };
    Organizer: {
      avatar?: string;
      cover?: string;
      description?: string;
      facebook?: string;
      faceit_url?: string;
      /** Format: int64 */
      followers_count?: number;
      name?: string;
      organizer_id?: string;
      twitch?: string;
      twitter?: string;
      type?: string;
      vk?: string;
      website?: string;
      youtube?: string;
    };
    OrganizerSearch: {
      active?: boolean;
      avatar?: string;
      countries?: string[];
      games?: string[];
      name?: string;
      organizer_id?: string;
      partner?: boolean;
      regions?: string[];
    };
    OrganizersSearchList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["OrganizerSearch"][];
      /** Format: int64 */
      start?: number;
    };
    PaginationFields: {
      /** Format: int64 */
      end?: number;
      /** Format: int64 */
      start?: number;
    };
    Placement: {
      division_name?: string;
      division_type?: string;
      ladder?: string;
      matchmaking_id?: string;
      /** Format: int64 */
      season_number?: number;
      tier_name?: string;
      /** Format: int64 */
      tier_rank?: number;
    };
    Player: {
      /** Format: date-time */
      activated_at?: string;
      avatar?: string;
      country?: string;
      /** @description Deprecated: no more in use */
      cover_featured_image?: string;
      cover_image?: string;
      faceit_url?: string;
      friends_ids?: string[];
      games?: {
        [key: string]: components["schemas"]["GameDetail"];
      };
      /** @description Deprecated: no more in use */
      infractions?: Record<string, never>;
      /** @description Deprecated: use memberships instead */
      membership_type?: string;
      memberships?: string[];
      new_steam_id?: string;
      nickname?: string;
      platforms?: {
        [key: string]: string;
      };
      player_id?: string;
      settings?: components["schemas"]["UserSettings"];
      steam_id_64?: string;
      steam_nickname?: string;
      verified?: boolean;
    };
    PlayerBan: {
      /** Format: date-time */
      ends_at?: string;
      game?: string;
      nickname?: string;
      reason?: string;
      /** Format: date-time */
      starts_at?: string;
      type?: string;
      user_id?: string;
    };
    PlayerBansList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["PlayerBan"][];
      /** Format: int64 */
      start?: number;
    };
    PlayerGlobalRanking: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["GlobalRanking"][];
      /** Format: int64 */
      position?: number;
      /** Format: int64 */
      start?: number;
    };
    /**
     * PlayerInLeague Model
     * @description PlayerInLeague holds information about a player in a league.
     */
    PlayerInLeague: {
      /** @description The division name that the player is in. */
      division_name?: string;
      /** @description The division tier that the player is in. */
      division_tier?: string;
      /** @description The division type that the player is in. */
      division_type?: string;
      /** @description The leaderboard id that the player is in. */
      leaderboard_id?: string;
      /**
       * Format: int64
       * @description The points of the player in the leaderboard.
       */
      points?: number;
      /**
       * Format: int64
       * @description The position of the player in the leaderboard.
       */
      position?: number;
    };
    PlayerStats: {
      game_id?: string;
      lifetime?: {
        [key: string]: Record<string, never>;
      };
      player_id?: string;
      segments?: {
        [key: string]: Record<string, never>;
      }[];
    };
    PlayerStatsForMatch: {
      stats?: {
        [key: string]: Record<string, never>;
      };
    };
    PlayerStatsForMatchesList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["PlayerStatsForMatch"][];
      /** Format: int64 */
      start?: number;
    };
    PlayerStatsSimple: {
      nickname?: Record<string, never>;
      player_id?: Record<string, never>;
      player_stats?: {
        [key: string]: Record<string, never>;
      };
    };
    /** @description Plugin A plugin for the Engine API */
    Plugin: {
      Config: components["schemas"]["PluginConfig"];
      /** @description True if the plugin is running. False if the plugin is not running, only installed. */
      Enabled: boolean;
      /** @description Id */
      Id?: string;
      /** @description name */
      Name: string;
      /** @description plugin remote reference used to push/pull the plugin */
      PluginReference?: string;
      Settings: components["schemas"]["PluginSettings"];
    };
    /** PluginConfig The config of a plugin. */
    PluginConfig: {
      Args: components["schemas"]["PluginConfigArgs"];
      /** @description description */
      Description: string;
      /** @description Docker Version used to create the plugin */
      DockerVersion?: string;
      /** @description documentation */
      Documentation: string;
      /** @description entrypoint */
      Entrypoint: string[];
      /** @description env */
      Env: components["schemas"]["PluginEnv"][];
      Interface: components["schemas"]["PluginConfigInterface"];
      /** @description ipc host */
      IpcHost: boolean;
      Linux: components["schemas"]["PluginConfigLinux"];
      /** @description mounts */
      Mounts: components["schemas"]["PluginMount"][];
      Network: components["schemas"]["PluginConfigNetwork"];
      /** @description pid host */
      PidHost: boolean;
      /** @description propagated mount */
      PropagatedMount: string;
      User?: components["schemas"]["PluginConfigUser"];
      /** @description work dir */
      WorkDir: string;
      rootfs?: components["schemas"]["PluginConfigRootfs"];
    };
    /** @description PluginConfigArgs plugin config args */
    PluginConfigArgs: {
      /** @description description */
      Description: string;
      /** @description name */
      Name: string;
      /** @description settable */
      Settable: string[];
      /** @description value */
      Value: string[];
    };
    /** @description PluginConfigInterface The interface between Docker and the plugin */
    PluginConfigInterface: {
      /** @description Protocol to use for clients connecting to the plugin. */
      ProtocolScheme?: string;
      /** @description socket */
      Socket: string;
      /** @description types */
      Types: components["schemas"]["PluginInterfaceType"][];
    };
    /** @description PluginConfigLinux plugin config linux */
    PluginConfigLinux: {
      /** @description allow all devices */
      AllowAllDevices: boolean;
      /** @description capabilities */
      Capabilities: string[];
      /** @description devices */
      Devices: components["schemas"]["PluginDevice"][];
    };
    /** @description PluginConfigNetwork plugin config network */
    PluginConfigNetwork: {
      /** @description type */
      Type: string;
    };
    /** @description PluginConfigRootfs plugin config rootfs */
    PluginConfigRootfs: {
      /** @description diff ids */
      diff_ids?: string[];
      /** @description type */
      type?: string;
    };
    /** @description PluginConfigUser plugin config user */
    PluginConfigUser: {
      /**
       * Format: uint32
       * @description g ID
       */
      GID?: number;
      /**
       * Format: uint32
       * @description UID
       */
      UID?: number;
    };
    /** @description PluginDevice plugin device */
    PluginDevice: {
      /** @description description */
      Description: string;
      /** @description name */
      Name: string;
      /** @description path */
      Path: string;
      /** @description settable */
      Settable: string[];
    };
    /** @description PluginEnv plugin env */
    PluginEnv: {
      /** @description description */
      Description: string;
      /** @description name */
      Name: string;
      /** @description settable */
      Settable: string[];
      /** @description value */
      Value: string;
    };
    /** @description PluginInterfaceType plugin interface type */
    PluginInterfaceType: {
      /** @description capability */
      Capability: string;
      /** @description prefix */
      Prefix: string;
      /** @description version */
      Version: string;
    };
    /** @description PluginMount plugin mount */
    PluginMount: {
      /** @description description */
      Description: string;
      /** @description destination */
      Destination: string;
      /** @description name */
      Name: string;
      /** @description options */
      Options: string[];
      /** @description settable */
      Settable: string[];
      /** @description source */
      Source: string;
      /** @description type */
      Type: string;
    };
    /** PluginSettings Settings that can be modified by users. */
    PluginSettings: {
      /** @description args */
      Args: string[];
      /** @description devices */
      Devices: components["schemas"]["PluginDevice"][];
      /** @description env */
      Env: string[];
      /** @description mounts */
      Mounts: components["schemas"]["PluginMount"][];
    };
    /** @description Port An open port on a container */
    Port: {
      /** @description Host IP address that the container's port is mapped to */
      IP?: string;
      /**
       * Format: uint16
       * @description Port on the container
       */
      PrivatePort: number;
      /**
       * Format: uint16
       * @description Port exposed on the host
       */
      PublicPort?: number;
      /** @description type */
      Type: string;
    };
    Prize: {
      /** Format: int64 */
      faceit_points?: number;
      /** Format: int64 */
      rank?: number;
    };
    /**
     * Promotion Model
     * @description Promotion holds information about what is required in order for a player to be promoted to the next tier.
     */
    Promotion: {
      /**
       * Format: int64
       * @description Points needed for a player to get promoted.
       * @example 10
       */
      points?: number;
    };
    /** @description PublishState represents the state of a Volume as it pertains to its
     *     use on a particular Node. */
    PublishState: string;
    /** @description PublishStatus represents the status of the volume as published to an
     *     individual node */
    PublishStatus: {
      /** @description NodeID is the ID of the swarm node this Volume is published to. */
      NodeID?: string;
      /** @description PublishContext is the PublishContext returned by the CSI plugin when
       *     a volume is published. */
      PublishContext?: {
        [key: string]: string;
      };
      State?: components["schemas"]["PublishState"];
    };
    Queue: {
      adminTool?: boolean;
      anticheatRequired?: boolean;
      calculateElo?: boolean;
      captainSelection?: string;
      checkIn?: components["schemas"]["CheckIn"];
      entityId?: string;
      entityType?: string;
      fbiManagement?: boolean;
      game?: string;
      groupSimilar?: boolean;
      id?: string;
      joinType?: components["schemas"]["JoinType"];
      /** Format: date-time */
      lastModified?: string;
      /** Format: int64 */
      maxSkill?: number;
      /** Format: int64 */
      minSkill?: number;
      /** Format: int64 */
      noOfPlayers?: number;
      open?: boolean;
      organizerId?: string;
      paused?: boolean;
      queueAlgorithm?: components["schemas"]["QueueAlgorithm"];
      queueName?: string;
      region?: string;
      state?: string;
      verifiedMatching?: boolean;
    };
    QueueAlgorithm: {
      algorithmId?: string;
      algorithmInput?: string[];
      algorithmParameters?: components["schemas"]["AlgorithmParameters"];
      geoDescription?: components["schemas"]["GeoDescription"];
      geoLabel?: components["schemas"]["GeoLabel"];
      id?: string;
      roleBasedCaptainPick?: boolean;
    };
    QueueBan: {
      /** Format: date-time */
      banEnd?: string;
      banId?: string;
      /** Format: date-time */
      banStart?: string;
      /** Format: date-time */
      createdAt?: string;
      entityId?: string;
      entityType?: string;
      expired?: boolean;
      /** Format: date-time */
      lastModified?: string;
      nickname?: string;
      organizerId?: string;
      queueId?: string;
      reason?: string;
      type?: string;
      userId?: string;
      /** Format: int64 */
      version?: number;
    };
    QueueBansList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["QueueBan"][];
      /** Format: int64 */
      start?: number;
    };
    QueueSimple: {
      entityId?: string;
      entityType?: string;
      game?: string;
      id?: string;
      /** Format: date-time */
      lastModified?: string;
      open?: boolean;
      organizerId?: string;
      queueName?: string;
      region?: string;
      state?: string;
    };
    QueuesList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["QueueSimple"][];
      /** Format: int64 */
      start?: number;
    };
    Ranking: {
      /** Format: int64 */
      current_streak?: number;
      /** Format: int64 */
      draw?: number;
      /** Format: int64 */
      lost?: number;
      /** Format: int64 */
      played?: number;
      player?: components["schemas"]["UserSimple"];
      /** Format: int64 */
      points?: number;
      /** Format: int64 */
      position?: number;
      /** Format: double */
      win_rate?: number;
      /** Format: int64 */
      won?: number;
    };
    /**
     * Relegation Model
     * @description Relegation holds information about what is required in order for a player to be relegated to the previous tier.
     */
    Relegation: {
      /**
       * Format: int64
       * @description Consecutive losses needed for a player to get relegated to the previous tier.
       * @example 3
       */
      consecutive_losses?: number;
    };
    Role: {
      color?: string;
      name?: string;
      /** Format: int64 */
      ranking?: number;
      role_id?: string;
      visible_on_chat?: boolean;
    };
    RolesList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["Role"][];
      /** Format: int64 */
      start?: number;
    };
    Roster: {
      anticheat_required?: boolean;
      avatar?: string;
      game_player_id?: string;
      game_player_name?: string;
      /** Format: int64 */
      game_skill_level?: number;
      membership?: string;
      nickname?: string;
      player_id?: string;
    };
    RoundStats: {
      best_of?: Record<string, never>;
      competition_id?: Record<string, never>;
      game_id?: Record<string, never>;
      game_mode?: Record<string, never>;
      match_id?: Record<string, never>;
      match_round?: Record<string, never>;
      played?: Record<string, never>;
      round_stats?: {
        [key: string]: Record<string, never>;
      };
      teams?: components["schemas"]["TeamStatsSimple"][];
    };
    Rules: {
      body?: string;
      game?: string;
      name?: string;
      organizer?: string;
      rule_id?: string;
    };
    /** @description Scope defines the Scope of a Cluster Volume. This is how many nodes a
     *     Volume can be accessed simultaneously on. */
    Scope: string;
    /**
     * Season Model
     * @description Season holds information about a league season. When no older season is requested, this field holds information about the season of the league.
     */
    Season: {
      /**
       * Format: date-time
       * @description The end date of the season.
       */
      end_date?: string;
      /**
       * Format: int64
       * @description The season number.
       */
      number?: number;
      /**
       * Format: int64
       * @description The placement match mount.
       */
      placement_match_count?: number;
      /**
       * Format: date-time
       * @description The start date of the season.
       */
      start_date?: string;
    };
    SeasonDetailed: {
      /** @description The divisions of the given season. */
      divisions?: components["schemas"]["Division"][];
      season?: components["schemas"]["Season"];
    };
    /** @description Secret represents a Swarm Secret value that must be passed to the CSI
     *     storage plugin when operating on this Volume. It represents one key-value
     *     pair of possibly many. */
    Secret: {
      /** @description Key is the name of the key of the key-value pair passed to the plugin. */
      Key?: string;
      /** @description Secret is the swarm Secret object from which to read data. This can be a
       *     Secret name or ID. The Secret data is retrieved by Swarm and used as the
       *     value of the key-value pair passed to the plugin. */
      Secret?: string;
    };
    /** @description ServiceCreateResponse contains the information returned to a client on the
     *     creation of a new service. */
    ServiceCreateResponse: {
      /** @description The ID of the created service. */
      ID?: string;
      /** @description Optional warning message.
       *
       *     FIXME(thaJeztah): this should have "omitempty" in the generated type. */
      Warnings?: string[];
    };
    /** @description ServiceUpdateResponse service update response */
    ServiceUpdateResponse: {
      /** @description Optional warning messages */
      Warnings?: string[];
    };
    /** @description SharingMode defines the Sharing of a Cluster Volume. This is how Tasks using a
     *     Volume at the same time can use it. */
    SharingMode: string;
    SpacePlayer: {
      /** Format: date-time */
      activated_at?: string;
      address?: components["schemas"]["Address"];
      avatar?: string;
      birth_date?: components["schemas"]["BirthDate"];
      country?: string;
      /** @description Deprecated: no more in use */
      cover_featured_image?: string;
      cover_image?: string;
      email?: string;
      faceit_url?: string;
      first_name?: string;
      friends_ids?: string[];
      games?: {
        [key: string]: components["schemas"]["GameDetail"];
      };
      /** @description Deprecated: no more in use */
      infractions?: Record<string, never>;
      last_name?: string;
      /** @description Deprecated: use memberships instead */
      membership_type?: string;
      memberships?: string[];
      new_steam_id?: string;
      nickname?: string;
      platforms?: {
        [key: string]: string;
      };
      player_id?: string;
      settings?: components["schemas"]["UserSettings"];
      steam_id_64?: string;
      steam_nickname?: string;
      verified?: boolean;
    };
    Stats: {
      /** Format: int64 */
      rating?: number;
      skillLevel?: {
        /** Format: int64 */
        average?: number;
        range?: {
          /** Format: int64 */
          max?: number;
          /** Format: int64 */
          min?: number;
        };
      };
      /** Format: double */
      winProbability?: number;
    };
    StatsCompetitionPlayer: {
      nickname?: string;
      player_id?: string;
      stats?: {
        [key: string]: Record<string, never>;
      };
    };
    SubstitutionConfiguration: {
      /** Format: int64 */
      max_substitutes?: number;
      /** Format: int64 */
      max_substitutions?: number;
    };
    /** @description Summary summary */
    Summary: {
      /**
       * Format: int64
       * @description Number of containers using this image. Includes both stopped and running
       *     containers.
       *
       *     This size is not calculated by default, and depends on which API endpoint
       *     is used. `-1` indicates that the value has not been set / calculated.
       */
      Containers: number;
      /**
       * Format: int64
       * @description Date and time at which the image was created as a Unix timestamp
       *     (number of seconds sinds EPOCH).
       */
      Created: number;
      /** @description ID is the content-addressable ID of an image.
       *
       *     This identifier is a content-addressable digest calculated from the
       *     image's configuration (which includes the digests of layers used by
       *     the image).
       *
       *     Note that this digest differs from the `RepoDigests` below, which
       *     holds digests of image manifests that reference the image. */
      Id: string;
      /** @description User-defined key/value metadata. */
      Labels: {
        [key: string]: string;
      };
      /** @description ID of the parent image.
       *
       *     Depending on how the image was created, this field may be empty and
       *     is only set for images that were built/created locally. This field
       *     is empty if the image was pulled from an image registry. */
      ParentId: string;
      /** @description List of content-addressable digests of locally available image manifests
       *     that the image is referenced from. Multiple manifests can refer to the
       *     same image.
       *
       *     These digests are usually only available if the image was either pulled
       *     from a registry, or if the image was pushed to a registry, which is when
       *     the manifest is generated and its digest calculated. */
      RepoDigests: string[];
      /** @description List of image names/tags in the local image cache that reference this
       *     image.
       *
       *     Multiple image tags can refer to the same image, and this list may be
       *     empty if no tags reference the image, in which case the image is
       *     "untagged", in which case it can still be referenced by its ID. */
      RepoTags: string[];
      /**
       * Format: int64
       * @description Total size of image layers that are shared between this image and other
       *     images.
       *
       *     This size is not calculated by default. `-1` indicates that the value
       *     has not been set / calculated.
       */
      SharedSize: number;
      /**
       * Format: int64
       * @description Total size of the image including all layers it is composed of.
       */
      Size: number;
      /**
       * Format: int64
       * @description Total size of the image including all layers it is composed of.
       *
       *     Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
       */
      VirtualSize?: number;
    };
    /**
     * Team Model
     * @description The Team holds information about a team.
     */
    Team: {
      /**
       * @description The Avatar of a team
       * @example https://avatar.jpg
       */
      avatar?: string;
      /**
       * @description The ChatID of a team
       * @example team-6204037c-30e6-408b-8aaa-dd8219860b4b
       */
      chat_room_id?: string;
      /**
       * @description The CoverImage of a team
       * @example https://cover-image.jpg
       */
      cover_image?: string;
      /**
       * @description The Description of a team
       * @example Some description
       */
      description?: string;
      /**
       * @description The Facebook of a team
       * @example https://facebook/team
       */
      facebook?: string;
      /**
       * @description The FaceitUrl of a team
       * @example https://www.faceit.com/{lang}/teams/6204037c-30e6-408b-8aaa-dd8219860b4b
       */
      faceit_url?: string;
      /**
       * @description The Game of a team
       * @example csgo
       */
      game?: string;
      /**
       * @description The Leader of a team
       * @example leader
       */
      leader?: string;
      /** @description The Members of a team
       *
       *     Can be empty if not supported */
      members?: components["schemas"]["UserSimple"][];
      /**
       * @description The Name of a team
       * @example name
       */
      name?: string;
      /**
       * @description The Nickname of a team
       * @example nickname
       */
      nickname?: string;
      /**
       * @description The ID of a team
       * @example 6204037c-30e6-408b-8aaa-dd8219860b4b
       */
      team_id?: string;
      /**
       * @description The TeamType of a team
       * @example premade
       */
      team_type?: string;
      /**
       * @description The Twitter of a team
       * @example https://twitter/team
       */
      twitter?: string;
      /**
       * @description The Website of a team
       * @example https://team.website
       */
      website?: string;
      /**
       * @description The Youtube of a team
       * @example https://youtube.com/team
       */
      youtube?: string;
    };
    /**
     * TeamList Model
     * @description The TeamList holds teams information.
     */
    TeamList: {
      /** Format: int64 */
      end?: number;
      /** @description The teams list. */
      readonly items: components["schemas"]["Team"][];
      /** Format: int64 */
      start?: number;
    };
    TeamSearch: {
      avatar?: string;
      chat_room_id?: string;
      faceit_url?: string;
      game?: string;
      name?: string;
      team_id?: string;
      verified?: boolean;
    };
    TeamStats: {
      game_id?: string;
      lifetime?: {
        [key: string]: Record<string, never>;
      };
      segments?: {
        [key: string]: Record<string, never>;
      }[];
      team_id?: string;
    };
    TeamStatsSimple: {
      players?: components["schemas"]["PlayerStatsSimple"][];
      premade?: Record<string, never>;
      team_id?: Record<string, never>;
      team_stats?: {
        [key: string]: Record<string, never>;
      };
    };
    TeamsSearchList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["TeamSearch"][];
      /** Format: int64 */
      start?: number;
    };
    Tier: {
      /** @description The name of the tier */
      name?: string;
      /**
       * Format: int64
       * @description The target points for the tier
       */
      points_target?: number;
      /**
       * Format: int64
       * @description The rank of the tier
       * @example 1
       */
      rank?: number;
    };
    /**
     * Topology is a map of topological domains to topological segments.
     * @description This description is taken verbatim from the CSI Spec:
     *
     *     A topological domain is a sub-division of a cluster, like "region",
     *     "zone", "rack", etc.
     *     A topological segment is a specific instance of a topological domain,
     *     like "zone3", "rack3", etc.
     *     For example {"com.company/zone": "Z1", "com.company/rack": "R3"}
     *     Valid keys have two segments: an OPTIONAL prefix and name, separated
     *     by a slash (/), for example: "com.company.example/zone".
     *     The key name segment is REQUIRED. The prefix is OPTIONAL.
     *     The key name MUST be 63 characters or less, begin and end with an
     *     alphanumeric character ([a-z0-9A-Z]), and contain only dashes (-),
     *     underscores (_), dots (.), or alphanumerics in between, for example
     *     "zone".
     *     The key prefix MUST be 63 characters or less, begin and end with a
     *     lower-case alphanumeric character ([a-z0-9]), contain only
     *     dashes (-), dots (.), or lower-case alphanumerics in between, and
     *     follow domain name notation format
     *     (https://tools.ietf.org/html/rfc1035#section-2.3.1).
     *     The key prefix SHOULD include the plugin's host company name and/or
     *     the plugin name, to minimize the possibility of collisions with keys
     *     from other plugins.
     *     If a key prefix is specified, it MUST be identical across all
     *     topology keys returned by the SP (across all RPCs).
     *     Keys MUST be case-insensitive. Meaning the keys "Zone" and "zone"
     *     MUST not both exist.
     *     Each value (topological segment) MUST contain 1 or more strings.
     *     Each string MUST be 63 characters or less and begin and end with an
     *     alphanumeric character with '-', '_', '.', or alphanumerics in
     *     between.
     */
    Topology: {
      Segments?: {
        [key: string]: string;
      };
    };
    /** @description TopologyRequirement expresses the user's requirements for a volume's
     *     accessible topology. */
    TopologyRequirement: {
      /** @description Preferred is a list of Topologies that the volume should attempt to be
       *     provisioned in.
       *
       *     Taken from the CSI spec:
       *
       *     Specifies the list of topologies the CO would prefer the volume to
       *     be provisioned in.
       *
       *     This field is OPTIONAL. If TopologyRequirement is specified either
       *     requisite or preferred or both MUST be specified.
       *
       *     An SP MUST attempt to make the provisioned volume available using
       *     the preferred topologies in order from first to last.
       *
       *     If requisite is specified, all topologies in preferred list MUST
       *     also be present in the list of requisite topologies.
       *
       *     If the SP is unable to make the provisioned volume available
       *     from any of the preferred topologies, the SP MAY choose a topology
       *     from the list of requisite topologies.
       *     If the list of requisite topologies is not specified, then the SP
       *     MAY choose from the list of all possible topologies.
       *     If the list of requisite topologies is specified and the SP is
       *     unable to make the provisioned volume available from any of the
       *     requisite topologies it MUST fail the CreateVolume call.
       *
       *     Example 1:
       *     Given a volume should be accessible from a single zone, and
       *     requisite =
       *     {"region": "R1", "zone": "Z2"},
       *     {"region": "R1", "zone": "Z3"}
       *     preferred =
       *     {"region": "R1", "zone": "Z3"}
       *     then the SP SHOULD first attempt to make the provisioned volume
       *     available from "zone" "Z3" in the "region" "R1" and fall back to
       *     "zone" "Z2" in the "region" "R1" if that is not possible.
       *
       *     Example 2:
       *     Given a volume should be accessible from a single zone, and
       *     requisite =
       *     {"region": "R1", "zone": "Z2"},
       *     {"region": "R1", "zone": "Z3"},
       *     {"region": "R1", "zone": "Z4"},
       *     {"region": "R1", "zone": "Z5"}
       *     preferred =
       *     {"region": "R1", "zone": "Z4"},
       *     {"region": "R1", "zone": "Z2"}
       *     then the SP SHOULD first attempt to make the provisioned volume
       *     accessible from "zone" "Z4" in the "region" "R1" and fall back to
       *     "zone" "Z2" in the "region" "R1" if that is not possible. If that
       *     is not possible, the SP may choose between either the "zone"
       *     "Z3" or "Z5" in the "region" "R1".
       *
       *     Example 3:
       *     Given a volume should be accessible from TWO zones (because an
       *     opaque parameter in CreateVolumeRequest, for example, specifies
       *     the volume is accessible from two zones, aka synchronously
       *     replicated), and
       *     requisite =
       *     {"region": "R1", "zone": "Z2"},
       *     {"region": "R1", "zone": "Z3"},
       *     {"region": "R1", "zone": "Z4"},
       *     {"region": "R1", "zone": "Z5"}
       *     preferred =
       *     {"region": "R1", "zone": "Z5"},
       *     {"region": "R1", "zone": "Z3"}
       *     then the SP SHOULD first attempt to make the provisioned volume
       *     accessible from the combination of the two "zones" "Z5" and "Z3" in
       *     the "region" "R1". If that's not possible, it should fall back to
       *     a combination of "Z5" and other possibilities from the list of
       *     requisite. If that's not possible, it should fall back  to a
       *     combination of "Z3" and other possibilities from the list of
       *     requisite. If that's not possible, it should fall back  to a
       *     combination of other possibilities from the list of requisite. */
      Preferred?: components["schemas"]["Topology"][];
      /** @description Requisite specifies a list of Topologies, at least one of which the
       *     volume must be accessible from.
       *
       *     Taken verbatim from the CSI Spec:
       *
       *     Specifies the list of topologies the provisioned volume MUST be
       *     accessible from.
       *     This field is OPTIONAL. If TopologyRequirement is specified either
       *     requisite or preferred or both MUST be specified.
       *
       *     If requisite is specified, the provisioned volume MUST be
       *     accessible from at least one of the requisite topologies.
       *
       *     Given
       *     x = number of topologies provisioned volume is accessible from
       *     n = number of requisite topologies
       *     The CO MUST ensure n >= 1. The SP MUST ensure x >= 1
       *     If x==n, then the SP MUST make the provisioned volume available to
       *     all topologies from the list of requisite topologies. If it is
       *     unable to do so, the SP MUST fail the CreateVolume call.
       *     For example, if a volume should be accessible from a single zone,
       *     and requisite =
       *     {"region": "R1", "zone": "Z2"}
       *     then the provisioned volume MUST be accessible from the "region"
       *     "R1" and the "zone" "Z2".
       *     Similarly, if a volume should be accessible from two zones, and
       *     requisite =
       *     {"region": "R1", "zone": "Z2"},
       *     {"region": "R1", "zone": "Z3"}
       *     then the provisioned volume MUST be accessible from the "region"
       *     "R1" and both "zone" "Z2" and "zone" "Z3".
       *
       *     If x<n, then the SP SHALL choose x unique topologies from the list
       *     of requisite topologies. If it is unable to do so, the SP MUST fail
       *     the CreateVolume call.
       *     For example, if a volume should be accessible from a single zone,
       *     and requisite =
       *     {"region": "R1", "zone": "Z2"},
       *     {"region": "R1", "zone": "Z3"}
       *     then the SP may choose to make the provisioned volume available in
       *     either the "zone" "Z2" or the "zone" "Z3" in the "region" "R1".
       *     Similarly, if a volume should be accessible from two zones, and
       *     requisite =
       *     {"region": "R1", "zone": "Z2"},
       *     {"region": "R1", "zone": "Z3"},
       *     {"region": "R1", "zone": "Z4"}
       *     then the provisioned volume MUST be accessible from any combination
       *     of two unique topologies: e.g. "R1/Z2" and "R1/Z3", or "R1/Z2" and
       *     "R1/Z4", or "R1/Z3" and "R1/Z4".
       *
       *     If x>n, then the SP MUST make the provisioned volume available from
       *     all topologies from the list of requisite topologies and MAY choose
       *     the remaining x-n unique topologies from the list of all possible
       *     topologies. If it is unable to do so, the SP MUST fail the
       *     CreateVolume call.
       *     For example, if a volume should be accessible from two zones, and
       *     requisite =
       *     {"region": "R1", "zone": "Z2"}
       *     then the provisioned volume MUST be accessible from the "region"
       *     "R1" and the "zone" "Z2" and the SP may select the second zone
       *     independently, e.g. "R1/Z4". */
      Requisite?: components["schemas"]["Topology"][];
    };
    Tournament: {
      anticheat_required?: boolean;
      best_of?: Record<string, never>;
      calculate_elo?: boolean;
      /** @description DEPRECATED: use tournament_id instead */
      competition_id?: string;
      cover_image?: string;
      custom?: boolean;
      description?: string;
      faceit_url?: string;
      featured_image?: string;
      game_data?: components["schemas"]["Game"];
      game_id?: string;
      invite_type?: string;
      match_type?: string;
      /** Format: int64 */
      max_skill?: number;
      membership_type?: string;
      /** Format: int64 */
      min_skill?: number;
      name?: string;
      /** Format: int64 */
      number_of_players?: number;
      /** Format: int64 */
      number_of_players_checkedin?: number;
      /** Format: int64 */
      number_of_players_joined?: number;
      /** Format: int64 */
      number_of_players_participants?: number;
      organizer_data?: components["schemas"]["Organizer"];
      organizer_id?: string;
      prize_type?: string;
      region?: string;
      rounds?: Record<string, never>[];
      rule?: string;
      /** Format: int64 */
      started_at?: number;
      status?: string;
      /** Format: int64 */
      substitutes_allowed?: number;
      /** Format: int64 */
      substitutions_allowed?: number;
      /** Format: int64 */
      team_size?: number;
      total_prize?: Record<string, never>;
      tournament_id?: string;
      voting?: Record<string, never>;
      whitelist_countries?: string[];
    };
    TournamentSimple: {
      anticheat_required?: boolean;
      custom?: boolean;
      faceit_url?: string;
      featured_image?: string;
      game_id?: string;
      invite_type?: string;
      match_type?: string;
      /** Format: int64 */
      max_skill?: number;
      membership_type?: string;
      /** Format: int64 */
      min_skill?: number;
      name?: string;
      /** Format: int64 */
      number_of_players?: number;
      /** Format: int64 */
      number_of_players_checkedin?: number;
      /** Format: int64 */
      number_of_players_joined?: number;
      /** Format: int64 */
      number_of_players_participants?: number;
      organizer_id?: string;
      prize_type?: string;
      region?: string;
      /** Format: int64 */
      started_at?: number;
      status?: string;
      /** Format: int64 */
      subscriptions_count?: number;
      /** Format: int64 */
      team_size?: number;
      total_prize?: Record<string, never>;
      tournament_id?: string;
      whitelist_countries?: string[];
    };
    TournamentTeam: {
      nickname?: string;
      /** Format: int64 */
      skill_level?: number;
      /** Format: int64 */
      subs_done?: number;
      team_id?: string;
      team_leader?: string;
      team_type?: string;
    };
    TournamentTeams: {
      checked_in?: components["schemas"]["TournamentTeam"][];
      finished?: components["schemas"]["TournamentTeam"][];
      joined?: components["schemas"]["TournamentTeam"][];
      started?: components["schemas"]["TournamentTeam"][];
    };
    TournamentsList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["TournamentSimple"][];
      /** Format: int64 */
      start?: number;
    };
    /**
     * TypeBlock defines options for using a volume as a block-type volume.
     * @description Intentionally empty.
     */
    TypeBlock: Record<string, never>;
    /** @description TypeMount contains options for using a volume as a Mount-type
     *     volume. */
    TypeMount: {
      /** @description FsType specifies the filesystem type for the mount volume. Optional. */
      FsType?: string;
      /** @description MountFlags defines flags to pass when mounting the volume. Optional. */
      MountFlags?: string[];
    };
    /** @description UsageData Usage details about the volume. This information is used by the
     *     `GET /system/df` endpoint, and omitted in other endpoints. */
    UsageData: {
      /**
       * Format: int64
       * @description The number of containers referencing this volume. This field
       *     is set to `-1` if the reference-count is not available.
       */
      RefCount: number;
      /**
       * Format: int64
       * @description Amount of disk space used by the volume (in bytes). This information
       *     is only available for volumes created with the `"local"` volume
       *     driver. For volumes created with other volume drivers, this field
       *     is set to `-1` ("not available")
       */
      Size: number;
    };
    UserSearch: {
      avatar?: string;
      country?: string;
      games?: components["schemas"]["GameUserSearch"][];
      nickname?: string;
      player_id?: string;
      status?: string;
      verified?: boolean;
    };
    UserSettings: {
      language?: string;
    };
    /**
     * UserSimple Model
     * @description The UserSimple holds information about a user.
     */
    UserSimple: {
      /**
       * @description The Avatar of a user
       * @example https://avatar.jpg
       */
      avatar?: string;
      /**
       * @description The Country of a user
       * @example GB
       */
      country?: string;
      /** @description The FaceitUrl of a user */
      faceit_url?: string;
      /** @description Deprecated: use memberships instead */
      membership_type?: string;
      /**
       * @description The Memberships of a user
       * @example [
       *       "free",
       *       "unlimited"
       *     ]
       */
      memberships?: string[];
      /**
       * @description The Nickname of a user
       * @example nickname
       */
      nickname?: string;
      /**
       * Format: int64
       * @description The SkillLevel of a user
       * @example 1
       */
      skill_level?: number;
      /**
       * @description The ID of a user
       * @example 6204037c-30e6-408b-8aaa-dd8219860b4b
       */
      user_id?: string;
    };
    UsersSearchList: {
      /** Format: int64 */
      end?: number;
      items?: components["schemas"]["UserSearch"][];
      /** Format: int64 */
      start?: number;
    };
    /** Version represents the internal object version. */
    Version: {
      /** Format: uint64 */
      Index?: number;
    };
    /** @description Volume volume */
    Volume: {
      ClusterVolume?: components["schemas"]["ClusterVolume"];
      /** @description Date/Time the volume was created. */
      CreatedAt?: string;
      /** @description Name of the volume driver used by the volume. */
      Driver: string;
      /** @description User-defined key/value metadata. */
      Labels: {
        [key: string]: string;
      };
      /** @description Mount path of the volume on the host. */
      Mountpoint: string;
      /** @description Name of the volume. */
      Name: string;
      /** @description The driver specific options used when creating the volume. */
      Options: {
        [key: string]: string;
      };
      /** @description The level at which the volume exists. Either `global` for cluster-wide,
       *     or `local` for machine level. */
      Scope: string;
      /** @description Low-level details about the volume, provided by the volume driver.
       *     Details are returned as a map with key/value pairs:
       *     `{"key":"value","key2":"value2"}`.
       *
       *     The `Status` field is optional, and is omitted if the volume driver
       *     does not support this feature. */
      Status?: {
        [key: string]: Record<string, never>;
      };
      UsageData?: components["schemas"]["UsageData"];
    };
    /** @description WaitExitError container waiting error, if any */
    WaitExitError: {
      /** @description Details of an error */
      Message?: string;
    };
    /**
     * WaitResponse ContainerWaitResponse
     * @description OK response to ContainerWait operation
     */
    WaitResponse: {
      Error?: components["schemas"]["WaitExitError"];
      /**
       * Format: int64
       * @description Exit code of the container
       */
      StatusCode: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getChampionships: {
    parameters: {
      query: {
        /** @description The id of the game */
        game: string;
        /** @description Kind of matches to return. Can be all(default), upcoming, ongoing or past */
        type?: "all" | "upcoming" | "ongoing" | "past";
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Championships list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChampionshipsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChampionship: {
    parameters: {
      query?: {
        /** @description List of entity names to expand in request */
        expanded?: ("organizer" | "game")[];
      };
      header?: never;
      path: {
        /** @description The id of the championship */
        championship_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Championship details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Championship"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChampionshipMatches: {
    parameters: {
      query?: {
        /** @description Kind of matches to return. Can be all(default), upcoming, ongoing or past */
        type?: "all" | "upcoming" | "ongoing" | "past";
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the championship */
        championship_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Matches list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MatchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChampionshipResults: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the championship */
        championship_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Championship results */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChampionshipResultList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChampionshipSubscriptions: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the championship */
        championship_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Subscriptions list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChampionshipSubscriptionsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getAllGames: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Games list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GamesList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getGameMatchmakings: {
    parameters: {
      query?: {
        /** @description The region of the matchmakings */
        region?: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Matchmakings list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MatchmakingList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getGame: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Game detail */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Game"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getParentGame: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Game detail */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Game"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getQueuesByEntityFilters: {
    parameters: {
      query: {
        /** @description The type of the entity */
        entity_type: string;
        /** @description The id of the entity */
        entity_id: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Queues list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QueuesList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getQueueById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
        /** @description The id of the queue */
        queue_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Queue */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Queue"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getQueueBans: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
        /** @description The id of the queue */
        queue_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bans list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QueueBansList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getQueuesByRegion: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
        /** @description The id of the region */
        region_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Queues list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QueuesList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHub: {
    parameters: {
      query?: {
        /** @description List of entity names to expand in request */
        expanded?: ("organizer" | "game")[];
      };
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Hub details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Hub"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHubMatches: {
    parameters: {
      query?: {
        /** @description Kind of matches to return. Can be all(default), upcoming, ongoing or past */
        type?: "all" | "upcoming" | "ongoing" | "past";
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Matches list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MatchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHubMembers: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Members list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HubMembers"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHubRoles: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Roles list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RolesList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHubRules: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Rules details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Rules"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHubStats: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Hub stats */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HubStats"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChampionshipLeaderboards: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the championship */
        championship_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Leaderboards list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LeaderboardsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChampionshipGroupRanking: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the championship */
        championship_id: string;
        /** @description A group of the championship */
        group: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Championship ranking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntityRanking"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHubLeaderboards: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Leaderboards list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LeaderboardsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHubRanking: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Hub ranking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntityRanking"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHubSeasonRanking: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the hub */
        hub_id: string;
        /** @description A season of the hub */
        season: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Hub ranking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntityRanking"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getLeaderboard: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the leaderboard */
        leaderboard_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Competition ranking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EntityRanking"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerRankingInLeaderboard: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the leaderboard */
        leaderboard_id: string;
        /** @description The id of the player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ranking of the player in the leaderboard */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Ranking"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getLeagueById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the league */
        league_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description League details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["League"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getLeagueSeason: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the league */
        league_id: string;
        /** @description The id of the season */
        season_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Season details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SeasonDetailed"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerForLeagueSeason: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the league */
        league_id: string;
        /** @description The id of the season */
        season_id: number;
        /** @description The id of the player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Player details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerInLeague"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMatch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the match */
        match_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Match details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Match"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMatchStats: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the match */
        match_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Match stats */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MatchStats"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMatchmaking: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the matchmaking */
        matchmaking_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Matchmaking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Matchmaking"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOrganizerByName: {
    parameters: {
      query: {
        /** @description The name of the organizer */
        name: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Organizer details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Organizer"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOrganizer: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the organizer */
        organizer_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Organizer details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Organizer"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOrganizerChampionships: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the organizer */
        organizer_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Championships list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChampionshipsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOrganizerGames: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the organizer */
        organizer_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Games list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GamesList"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOrganizerHubs: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the organizer */
        organizer_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Hubs list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HubsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOrganizerTournaments: {
    parameters: {
      query?: {
        /** @description Kind of tournament. Can be upcoming(default) or past */
        type?: "past" | "upcoming";
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the organizer */
        organizer_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tournaments list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TournamentsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerFromLookup: {
    parameters: {
      query?: {
        /** @description The nickname of the player on FACEIT */
        nickname?: string;
        /** @description A game on FACEIT */
        game?: string;
        /** @description The ID of a player on game's platform */
        game_player_id?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Player details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Player"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayer: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Player details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Player"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerBans: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bans of a user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerBansList"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerStats: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
        /** @description Used to filter the dataset by date (minimum). Expected value is date ("items.stats.Match Finished At") in epoch milliseconds.
         *      */
        from?: number;
        /** @description Used to filter the dataset by date (maximum). Expected value is date ("items.stats.Match Finished At") in epoch milliseconds.
         *      */
        to?: number;
      };
      header?: never;
      path: {
        /** @description The id of the player */
        player_id: string;
        /** @description A game on FACEIT */
        game_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Player stats for matches */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerStatsForMatchesList"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerHistory: {
    parameters: {
      query: {
        /** @description A game on FACEIT */
        game: string;
        /** @description The timestamp (Unix time) as lower bound of the query. 1 month ago if not specified */
        from?: number;
        /** @description The timestamp (Unix time) as higher bound of the query. Current timestamp if not specified */
        to?: number;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Player matches list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MatchHistoryList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerHubs: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Hubs list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HubsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerTeams: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Teams of a user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamList"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerTournaments: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tournaments list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TournamentsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getGlobalRanking: {
    parameters: {
      query?: {
        /** @description A country code (ISO 3166-1) */
        country?: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
        /** @description A region of a game */
        region: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ranking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GlobalRankingList"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPlayerRanking: {
    parameters: {
      query?: {
        /** @description A country code (ISO 3166-1) */
        country?: string;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the game */
        game_id: string;
        /** @description A region of a game */
        region: string;
        /** @description The id of a player */
        player_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Ranking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlayerGlobalRanking"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchChampionships: {
    parameters: {
      query: {
        /** @description The name of a championship on FACEIT */
        name: string;
        /** @description A game on FACEIT */
        game?: string;
        /** @description A region of the game */
        region?: string;
        /** @description Kind of competitions to return */
        type?: "all" | "upcoming" | "ongoing" | "past";
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of championship */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompetitionsSearchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchClans: {
    parameters: {
      query: {
        /** @description The name of a clan on FACEIT */
        name: string;
        /** @description A game on FACEIT */
        game?: string;
        /** @description A region of the game */
        region?: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of hub */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClansSearchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchHubs: {
    parameters: {
      query: {
        /** @description The name of a hub on FACEIT */
        name: string;
        /** @description A game on FACEIT */
        game?: string;
        /** @description A region of the game */
        region?: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of hub */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompetitionsSearchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchOrganizers: {
    parameters: {
      query: {
        /** @description The name of a organizer on FACEIT */
        name: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of organizers */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrganizersSearchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchPlayers: {
    parameters: {
      query: {
        /** @description The nickname of a player on FACEIT */
        nickname: string;
        /** @description A game on FACEIT */
        game?: string;
        /** @description A country code (ISO 3166-1) */
        country?: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of players */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UsersSearchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchTeams: {
    parameters: {
      query: {
        /** @description The nickname of a team on FACEIT */
        nickname: string;
        /** @description A game on FACEIT */
        game?: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of teams */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamsSearchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchTournaments: {
    parameters: {
      query: {
        /** @description The name of a tournament on FACEIT */
        name: string;
        /** @description A game on FACEIT */
        game?: string;
        /** @description A region of the game */
        region?: string;
        /** @description Kind of competitions to return */
        type?: "all" | "upcoming" | "ongoing" | "past";
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of tournament */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CompetitionsSearchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTeam: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the team */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Team details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTeamStats: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the team */
        team_id: string;
        /** @description A game on FACEIT */
        game_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Team stats */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TeamStats"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTeamTournaments: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the team */
        team_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tournaments list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TournamentsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTournamentsList: {
    parameters: {
      query?: {
        /** @description A game on FACEIT */
        game?: string;
        /** @description A region of the game */
        region?: string;
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tournaments list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TournamentsList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTournament: {
    parameters: {
      query?: {
        /** @description List of entity names to expand in request */
        expanded?: ("organizer" | "game")[];
      };
      header?: never;
      path: {
        /** @description The id of the tournament */
        tournament_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tournament details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Tournament"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTournamentBrackets: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of the tournament */
        tournament_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Rounds and matches list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Brackets"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTournamentMatches: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the tournament */
        tournament_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Matches list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MatchList"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTournamentTeams: {
    parameters: {
      query?: {
        /** @description The starting item position */
        offset?: number;
        /** @description The number of items to return */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description The id of the tournament */
        tournament_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Teams list */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TournamentTeams"];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Too many requests */
      429: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Temporarily unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Generic error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
